{"/home/circleci/circleci-build/src/connector.ts":{"path":"/home/circleci/circleci-build/src/connector.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":12},"end":{"line":3,"column":38}},"2":{"start":{"line":4,"column":18},"end":{"line":4,"column":36}},"3":{"start":{"line":5,"column":16},"end":{"line":5,"column":44}},"4":{"start":{"line":52,"column":8},"end":{"line":52,"column":16}},"5":{"start":{"line":53,"column":8},"end":{"line":53,"column":31}},"6":{"start":{"line":54,"column":8},"end":{"line":54,"column":33}},"7":{"start":{"line":55,"column":8},"end":{"line":55,"column":88}},"8":{"start":{"line":56,"column":8},"end":{"line":56,"column":55}},"9":{"start":{"line":57,"column":8},"end":{"line":57,"column":85}},"10":{"start":{"line":58,"column":8},"end":{"line":58,"column":37}},"11":{"start":{"line":59,"column":8},"end":{"line":59,"column":67}},"12":{"start":{"line":60,"column":8},"end":{"line":62,"column":9}},"13":{"start":{"line":61,"column":12},"end":{"line":61,"column":111}},"14":{"start":{"line":63,"column":8},"end":{"line":63,"column":104}},"15":{"start":{"line":64,"column":8},"end":{"line":64,"column":30}},"16":{"start":{"line":67,"column":8},"end":{"line":67,"column":50}},"17":{"start":{"line":68,"column":8},"end":{"line":68,"column":50}},"18":{"start":{"line":74,"column":23},"end":{"line":74,"column":42}},"19":{"start":{"line":75,"column":8},"end":{"line":77,"column":9}},"20":{"start":{"line":76,"column":12},"end":{"line":76,"column":39}},"21":{"start":{"line":78,"column":8},"end":{"line":81,"column":9}},"22":{"start":{"line":79,"column":12},"end":{"line":79,"column":43}},"23":{"start":{"line":80,"column":12},"end":{"line":80,"column":19}},"24":{"start":{"line":82,"column":8},"end":{"line":82,"column":33}},"25":{"start":{"line":83,"column":8},"end":{"line":83,"column":35}},"26":{"start":{"line":84,"column":8},"end":{"line":84,"column":104}},"27":{"start":{"line":90,"column":23},"end":{"line":90,"column":42}},"28":{"start":{"line":91,"column":8},"end":{"line":94,"column":9}},"29":{"start":{"line":92,"column":12},"end":{"line":92,"column":43}},"30":{"start":{"line":93,"column":12},"end":{"line":93,"column":19}},"31":{"start":{"line":95,"column":8},"end":{"line":113,"column":11}},"32":{"start":{"line":96,"column":12},"end":{"line":100,"column":13}},"33":{"start":{"line":98,"column":16},"end":{"line":98,"column":49}},"34":{"start":{"line":99,"column":16},"end":{"line":99,"column":23}},"35":{"start":{"line":101,"column":12},"end":{"line":104,"column":13}},"36":{"start":{"line":102,"column":16},"end":{"line":102,"column":41}},"37":{"start":{"line":103,"column":16},"end":{"line":103,"column":23}},"38":{"start":{"line":105,"column":28},"end":{"line":105,"column":42}},"39":{"start":{"line":106,"column":12},"end":{"line":106,"column":27}},"40":{"start":{"line":107,"column":12},"end":{"line":107,"column":30}},"41":{"start":{"line":108,"column":12},"end":{"line":108,"column":34}},"42":{"start":{"line":109,"column":12},"end":{"line":111,"column":13}},"43":{"start":{"line":110,"column":16},"end":{"line":110,"column":34}},"44":{"start":{"line":112,"column":12},"end":{"line":112,"column":41}},"45":{"start":{"line":119,"column":23},"end":{"line":119,"column":42}},"46":{"start":{"line":120,"column":8},"end":{"line":123,"column":9}},"47":{"start":{"line":121,"column":12},"end":{"line":121,"column":43}},"48":{"start":{"line":122,"column":12},"end":{"line":122,"column":19}},"49":{"start":{"line":124,"column":8},"end":{"line":124,"column":69}},"50":{"start":{"line":127,"column":8},"end":{"line":127,"column":51}},"51":{"start":{"line":140,"column":22},"end":{"line":140,"column":49}},"52":{"start":{"line":143,"column":8},"end":{"line":145,"column":9}},"53":{"start":{"line":144,"column":12},"end":{"line":144,"column":24}},"54":{"start":{"line":146,"column":8},"end":{"line":153,"column":9}},"55":{"start":{"line":147,"column":12},"end":{"line":147,"column":52}},"56":{"start":{"line":148,"column":12},"end":{"line":148,"column":21}},"57":{"start":{"line":151,"column":12},"end":{"line":151,"column":53}},"58":{"start":{"line":152,"column":12},"end":{"line":152,"column":42}},"59":{"start":{"line":154,"column":8},"end":{"line":154,"column":70}},"60":{"start":{"line":161,"column":25},"end":{"line":161,"column":61}},"61":{"start":{"line":162,"column":8},"end":{"line":166,"column":9}},"62":{"start":{"line":163,"column":12},"end":{"line":163,"column":60}},"63":{"start":{"line":164,"column":12},"end":{"line":164,"column":45}},"64":{"start":{"line":165,"column":12},"end":{"line":165,"column":61}},"65":{"start":{"line":167,"column":8},"end":{"line":167,"column":26}},"66":{"start":{"line":170,"column":0},"end":{"line":170,"column":30}},"67":{"start":{"line":171,"column":0},"end":{"line":171,"column":28}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":51,"column":4},"end":{"line":51,"column":5}},"loc":{"start":{"line":51,"column":35},"end":{"line":65,"column":5}},"line":51},"1":{"name":"(anonymous_1)","decl":{"start":{"line":66,"column":4},"end":{"line":66,"column":5}},"loc":{"start":{"line":66,"column":22},"end":{"line":69,"column":5}},"line":66},"2":{"name":"(anonymous_2)","decl":{"start":{"line":73,"column":4},"end":{"line":73,"column":5}},"loc":{"start":{"line":73,"column":39},"end":{"line":85,"column":5}},"line":73},"3":{"name":"(anonymous_3)","decl":{"start":{"line":89,"column":4},"end":{"line":89,"column":5}},"loc":{"start":{"line":89,"column":23},"end":{"line":114,"column":5}},"line":89},"4":{"name":"(anonymous_4)","decl":{"start":{"line":95,"column":57},"end":{"line":95,"column":58}},"loc":{"start":{"line":95,"column":73},"end":{"line":113,"column":9}},"line":95},"5":{"name":"(anonymous_5)","decl":{"start":{"line":118,"column":4},"end":{"line":118,"column":5}},"loc":{"start":{"line":118,"column":26},"end":{"line":125,"column":5}},"line":118},"6":{"name":"(anonymous_6)","decl":{"start":{"line":126,"column":4},"end":{"line":126,"column":5}},"loc":{"start":{"line":126,"column":38},"end":{"line":128,"column":5}},"line":126},"7":{"name":"(anonymous_7)","decl":{"start":{"line":139,"column":4},"end":{"line":139,"column":5}},"loc":{"start":{"line":139,"column":19},"end":{"line":155,"column":5}},"line":139},"8":{"name":"(anonymous_8)","decl":{"start":{"line":160,"column":4},"end":{"line":160,"column":5}},"loc":{"start":{"line":160,"column":34},"end":{"line":168,"column":5}},"line":160}},"branchMap":{"0":{"loc":{"start":{"line":56,"column":25},"end":{"line":56,"column":54}},"type":"binary-expr","locations":[{"start":{"line":56,"column":25},"end":{"line":56,"column":47}},{"start":{"line":56,"column":51},"end":{"line":56,"column":54}}],"line":56},"1":{"loc":{"start":{"line":57,"column":33},"end":{"line":57,"column":84}},"type":"binary-expr","locations":[{"start":{"line":57,"column":33},"end":{"line":57,"column":63}},{"start":{"line":57,"column":67},"end":{"line":57,"column":84}}],"line":57},"2":{"loc":{"start":{"line":60,"column":8},"end":{"line":62,"column":9}},"type":"if","locations":[{"start":{"line":60,"column":8},"end":{"line":62,"column":9}},{"start":{"line":60,"column":8},"end":{"line":62,"column":9}}],"line":60},"3":{"loc":{"start":{"line":75,"column":8},"end":{"line":77,"column":9}},"type":"if","locations":[{"start":{"line":75,"column":8},"end":{"line":77,"column":9}},{"start":{"line":75,"column":8},"end":{"line":77,"column":9}}],"line":75},"4":{"loc":{"start":{"line":78,"column":8},"end":{"line":81,"column":9}},"type":"if","locations":[{"start":{"line":78,"column":8},"end":{"line":81,"column":9}},{"start":{"line":78,"column":8},"end":{"line":81,"column":9}}],"line":78},"5":{"loc":{"start":{"line":91,"column":8},"end":{"line":94,"column":9}},"type":"if","locations":[{"start":{"line":91,"column":8},"end":{"line":94,"column":9}},{"start":{"line":91,"column":8},"end":{"line":94,"column":9}}],"line":91},"6":{"loc":{"start":{"line":96,"column":12},"end":{"line":100,"column":13}},"type":"if","locations":[{"start":{"line":96,"column":12},"end":{"line":100,"column":13}},{"start":{"line":96,"column":12},"end":{"line":100,"column":13}}],"line":96},"7":{"loc":{"start":{"line":101,"column":12},"end":{"line":104,"column":13}},"type":"if","locations":[{"start":{"line":101,"column":12},"end":{"line":104,"column":13}},{"start":{"line":101,"column":12},"end":{"line":104,"column":13}}],"line":101},"8":{"loc":{"start":{"line":109,"column":12},"end":{"line":111,"column":13}},"type":"if","locations":[{"start":{"line":109,"column":12},"end":{"line":111,"column":13}},{"start":{"line":109,"column":12},"end":{"line":111,"column":13}}],"line":109},"9":{"loc":{"start":{"line":120,"column":8},"end":{"line":123,"column":9}},"type":"if","locations":[{"start":{"line":120,"column":8},"end":{"line":123,"column":9}},{"start":{"line":120,"column":8},"end":{"line":123,"column":9}}],"line":120},"10":{"loc":{"start":{"line":143,"column":8},"end":{"line":145,"column":9}},"type":"if","locations":[{"start":{"line":143,"column":8},"end":{"line":145,"column":9}},{"start":{"line":143,"column":8},"end":{"line":145,"column":9}}],"line":143},"11":{"loc":{"start":{"line":146,"column":8},"end":{"line":153,"column":9}},"type":"if","locations":[{"start":{"line":146,"column":8},"end":{"line":153,"column":9}},{"start":{"line":146,"column":8},"end":{"line":153,"column":9}}],"line":146},"12":{"loc":{"start":{"line":162,"column":8},"end":{"line":166,"column":9}},"type":"if","locations":[{"start":{"line":162,"column":8},"end":{"line":166,"column":9}},{"start":{"line":162,"column":8},"end":{"line":166,"column":9}}],"line":162}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":0,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":0,"21":1,"22":0,"23":0,"24":1,"25":1,"26":1,"27":3,"28":3,"29":0,"30":0,"31":3,"32":3,"33":0,"34":0,"35":3,"36":2,"37":2,"38":1,"39":1,"40":1,"41":1,"42":1,"43":0,"44":1,"45":1,"46":1,"47":0,"48":0,"49":1,"50":0,"51":5,"52":5,"53":0,"54":5,"55":5,"56":5,"57":0,"58":0,"59":5,"60":5,"61":5,"62":1,"63":1,"64":1,"65":5,"66":1,"67":1},"f":{"0":1,"1":1,"2":1,"3":3,"4":3,"5":1,"6":0,"7":5,"8":5},"b":{"0":[1,0],"1":[1,0],"2":[0,1],"3":[0,1],"4":[0,1],"5":[0,3],"6":[0,3],"7":[2,1],"8":[0,1],"9":[0,1],"10":[0,5],"11":[5,0],"12":[1,4]},"inputSourceMap":{"version":3,"file":"/home/circleci/circleci-build/src/connector.ts","sources":["/home/circleci/circleci-build/src/connector.ts"],"names":[],"mappings":"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","sourcesContent":["import * as pkg from '../package.json'\nimport { MongoClient, Db, Collection } from 'mongodb'\nimport { DeepstreamPlugin, DeepstreamStorage, DeepstreamServices, StorageWriteCallback, StorageReadCallback, EVENT } from '@deepstream/types'\nimport { JSONObject } from '@deepstream/protobuf/dist/types/all'\n\ninterface MongoOptions {\n  connectionString: any\n  db: string\n  defaultCollection: string\n  splitChar: string\n}\n\n/**\n * Connects deepstream to MongoDb.\n *\n * Collections, ids and performance\n * --------------------------------------------------\n * Deepstream treats its storage like a simple key value store. But there are a few things\n * we can do to speed it up when using MongoDb. Mainly: using smaller (e.g. more granular) collections and using successive Id's\n *\n *\n * To support multiple collections pass a splitChar setting to this class. This setting specifies a character\n * at which keys will be split and ordered into collections. This sounds a bit complicated, but all that means is the following:\n *\n * Imagine you want to store a few users. Just specify their recordNames as e.g.\n *\n *  user/i4vcg5j1-16n1qrnziuog\n *  user/i4vcg5x9-a2wc3g9pbhmi\n *  user/i4vcg74u-21ufhl1qs8fh\n *\n * and in your options set\n *\n * { splitChar: '/' }\n *\n * This way the MongoDB connector will create a 'user' collection the first time\n * it encounters this recordName and will subsequently store users in it. This will\n * improve the speed of read operations since MongoDb has to look through a smaller\n * amount of datasets to find your record\n *\n * On top of this, it makes sense to use successive ids. MongoDb will optimise collections\n * by putting documents with similar ids next to each other. Fortunately, the build-in getUid()\n * method of the deepstream client already produces semi-succesive ids. Notice how the first bits of the\n * ids (user/i4vcg5) are all the same. These are Base36 encoded timestamps, facilitating almost succesive ordering.\n *\n * {\n *    // Optional: Collections for items without a splitChar or if no splitChar is specified. Defaults to 'deepstream_docs'\n   defaultCollection: <String>,\n\n   // Optional: A char that seperates the collection name from the document id. Defaults to null\n   splitChar: <String>,\n\n   // Full connection URL for MongoDb. Format is mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]\n   // More details can be found here: http://docs.mongodb.org/manual/reference/connection-string/\n   connectionString: <String>\n   }\n */\nexport class Connector extends DeepstreamPlugin implements DeepstreamStorage {\n  public apiVersion?: number | undefined\n\n  public description = `MongoDB Storage ${pkg.version} using db ${this.options.db}`\n\n  private splitChar: string = this.options.splitChar || '/'\n  private defaultCollection = this.options.defaultCollection || 'deepstream_docs'\n  private collections = new Map<string, Collection>()\n  private logger = this.services.logger.getNameSpace('MONGODB')\n\n  private client: MongoClient\n  private db!: Db\n\n  constructor (private options: MongoOptions, private services: DeepstreamServices) {\n    super()\n\n    if (!this.options.connectionString) {\n      this.logger.fatal(EVENT.PLUGIN_INITIALIZATION_ERROR, \"Missing setting 'connectionString'\")\n    }\n\n    this.client = new MongoClient(options.connectionString, { useUnifiedTopology: true })\n    this.client.connect()\n  }\n\n  public async whenReady () {\n    this.client = await this.client.connect()\n    this.db = this.client.db(this.options.db)\n  }\n\n  /**\n   * Writes a value to the cache.\n   */\n  public set (key: string, version: number, value: JSONObject, callback: StorageWriteCallback) {\n    const params = this.getParams(key)\n\n    if (value instanceof Array) {\n      value = { ds_list: value }\n    }\n\n    if (params === null) {\n      callback(`Invalid key ${key}`)\n      return\n    }\n\n    value.ds_key = params.id\n    value.ds_version = version\n    params.collection.updateOne(\n      { ds_key: params.id },\n      { $set: value },\n      { upsert: true },\n      callback as any\n    )\n  }\n\n  /**\n   * Retrieves a value from the cache\n   */\n  public get (key: string, callback: StorageReadCallback) {\n    const params = this.getParams(key )\n\n    if ( params === null ) {\n      callback(`Invalid key ${key}`)\n      return\n    }\n\n    params.collection.findOne({ ds_key: params.id }, (error, doc) => {\n      if (error) {\n        // this.logger.error(EVENT.ERROR, 'Error retrieving mongodb entry', { error })\n        callback('Error getting object')\n        return\n      }\n\n      if (doc === null) {\n        callback(null, -1, null)\n        return\n      }\n\n      const version = doc.ds_version\n      delete doc._id\n      delete doc.ds_key\n      delete doc.ds_version\n\n      if (doc.ds_list instanceof Array) {\n        doc = doc.ds_list\n      }\n\n      callback( null, version, doc)\n    })\n  }\n\n  /**\n   * Deletes an entry from the cache.\n   */\n  public delete (key: string, callback: StorageWriteCallback) {\n    const params = this.getParams(key)\n\n    if (params === null) {\n      callback('Invalid key ' + key )\n      return\n    }\n\n    params.collection.deleteOne({ ds_key: params.id }, callback as any)\n  }\n\n  public deleteBulk (recordNames: string[], callback: StorageWriteCallback): void {\n    throw new Error('Method not implemented.')\n  }\n\n  /**\n   * Determines the document id and the collection\n   * to use based on the provided key\n   *\n   * Creates the collection if it doesn't exist yet.\n   *\n   * Since MongoDB Object IDs are adhering to a specified format\n   * we'll add a new field for the key called ds_key and index the\n   * collection based on it\n   */\n  public getParams (key: string) {\n    const index = key.indexOf(this.splitChar)\n    let collectionName\n    let id\n\n    if ( index === 0 ) {\n      return null // cannot have an empty collection name\n    }\n\n    if ( index === -1 ) {\n      collectionName = this.defaultCollection\n      id = key\n    } else {\n      collectionName = key.substring(0, index)\n      id = key.substring(index + 1)\n    }\n\n    return { collection: this.getCollection(collectionName), id }\n  }\n\n  /**\n   * Returns a MongoConnection object given its name.\n   * Creates the collection if it doesn't exist yet.\n   */\n  public getCollection (collectionName: string) {\n    let collection = this.collections.get(collectionName)\n    if (!collection) {\n      collection = this.db.collection(collectionName)\n      collection.createIndex('ds_key') // this is async\n      this.collections.set(collectionName, collection)\n    }\n    return collection\n  }\n\n}\n\nexport default Connector\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"b96e61bfc7a19cdfe9ee30fde418959d9fab9076","contentHash":"6f9db7f72419153730e2310662bc0f12f1de784fba7cd9ad89de7b7ab263c8a8"}}