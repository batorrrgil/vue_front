{"/home/circleci/circleci-build/src/connector.ts":{"path":"/home/circleci/circleci-build/src/connector.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":18},"end":{"line":3,"column":38}},"2":{"start":{"line":4,"column":24},"end":{"line":4,"column":50}},"3":{"start":{"line":5,"column":15},"end":{"line":5,"column":32}},"4":{"start":{"line":6,"column":23},"end":{"line":6,"column":49}},"5":{"start":{"line":7,"column":17},"end":{"line":7,"column":34}},"6":{"start":{"line":8,"column":16},"end":{"line":8,"column":44}},"7":{"start":{"line":41,"column":8},"end":{"line":41,"column":16}},"8":{"start":{"line":42,"column":8},"end":{"line":42,"column":31}},"9":{"start":{"line":43,"column":8},"end":{"line":43,"column":33}},"10":{"start":{"line":44,"column":8},"end":{"line":44,"column":28}},"11":{"start":{"line":45,"column":8},"end":{"line":45,"column":83}},"12":{"start":{"line":46,"column":8},"end":{"line":46,"column":78}},"13":{"start":{"line":47,"column":8},"end":{"line":47,"column":56}},"14":{"start":{"line":48,"column":8},"end":{"line":48,"column":61}},"15":{"start":{"line":49,"column":8},"end":{"line":49,"column":51}},"16":{"start":{"line":50,"column":8},"end":{"line":50,"column":29}},"17":{"start":{"line":51,"column":8},"end":{"line":51,"column":68}},"18":{"start":{"line":52,"column":8},"end":{"line":52,"column":35}},"19":{"start":{"line":53,"column":8},"end":{"line":55,"column":19}},"20":{"start":{"line":56,"column":8},"end":{"line":56,"column":48}},"21":{"start":{"line":57,"column":8},"end":{"line":57,"column":23}},"22":{"start":{"line":60,"column":8},"end":{"line":74,"column":9}},"23":{"start":{"line":61,"column":12},"end":{"line":61,"column":68}},"24":{"start":{"line":62,"column":27},"end":{"line":62,"column":72}},"25":{"start":{"line":63,"column":12},"end":{"line":65,"column":13}},"26":{"start":{"line":64,"column":16},"end":{"line":64,"column":79}},"27":{"start":{"line":66,"column":12},"end":{"line":66,"column":49}},"28":{"start":{"line":67,"column":12},"end":{"line":67,"column":99}},"29":{"start":{"line":68,"column":12},"end":{"line":68,"column":52}},"30":{"start":{"line":69,"column":12},"end":{"line":69,"column":32}},"31":{"start":{"line":70,"column":12},"end":{"line":70,"column":39}},"32":{"start":{"line":73,"column":12},"end":{"line":73,"column":68}},"33":{"start":{"line":77,"column":8},"end":{"line":79,"column":9}},"34":{"start":{"line":78,"column":12},"end":{"line":78,"column":79}},"35":{"start":{"line":78,"column":42},"end":{"line":78,"column":77}},"36":{"start":{"line":82,"column":8},"end":{"line":82,"column":38}},"37":{"start":{"line":90,"column":8},"end":{"line":92,"column":9}},"38":{"start":{"line":91,"column":12},"end":{"line":91,"column":110}},"39":{"start":{"line":93,"column":23},"end":{"line":93,"column":49}},"40":{"start":{"line":94,"column":8},"end":{"line":102,"column":9}},"41":{"start":{"line":95,"column":12},"end":{"line":95,"column":57}},"42":{"start":{"line":98,"column":12},"end":{"line":101,"column":15}},"43":{"start":{"line":100,"column":16},"end":{"line":100,"column":61}},"44":{"start":{"line":108,"column":23},"end":{"line":108,"column":42}},"45":{"start":{"line":109,"column":8},"end":{"line":141,"column":9}},"46":{"start":{"line":110,"column":12},"end":{"line":137,"column":15}},"47":{"start":{"line":114,"column":16},"end":{"line":117,"column":17}},"48":{"start":{"line":115,"column":20},"end":{"line":115,"column":47}},"49":{"start":{"line":116,"column":20},"end":{"line":116,"column":27}},"50":{"start":{"line":118,"column":16},"end":{"line":121,"column":17}},"51":{"start":{"line":119,"column":20},"end":{"line":119,"column":45}},"52":{"start":{"line":120,"column":20},"end":{"line":120,"column":27}},"53":{"start":{"line":123,"column":16},"end":{"line":128,"column":17}},"54":{"start":{"line":124,"column":20},"end":{"line":124,"column":61}},"55":{"start":{"line":127,"column":20},"end":{"line":127,"column":44}},"56":{"start":{"line":129,"column":16},"end":{"line":129,"column":46}},"57":{"start":{"line":130,"column":16},"end":{"line":130,"column":34}},"58":{"start":{"line":131,"column":16},"end":{"line":136,"column":17}},"59":{"start":{"line":132,"column":20},"end":{"line":132,"column":60}},"60":{"start":{"line":135,"column":20},"end":{"line":135,"column":51}},"61":{"start":{"line":140,"column":12},"end":{"line":140,"column":37}},"62":{"start":{"line":147,"column":8},"end":{"line":149,"column":9}},"63":{"start":{"line":148,"column":12},"end":{"line":148,"column":110}},"64":{"start":{"line":150,"column":23},"end":{"line":150,"column":42}},"65":{"start":{"line":151,"column":8},"end":{"line":160,"column":9}},"66":{"start":{"line":152,"column":12},"end":{"line":156,"column":48}},"67":{"start":{"line":159,"column":12},"end":{"line":159,"column":63}},"68":{"start":{"line":163,"column":8},"end":{"line":163,"column":62}},"69":{"start":{"line":170,"column":22},"end":{"line":170,"column":86}},"70":{"start":{"line":171,"column":23},"end":{"line":171,"column":67}},"71":{"start":{"line":172,"column":8},"end":{"line":175,"column":9}},"72":{"start":{"line":173,"column":12},"end":{"line":173,"column":36}},"73":{"start":{"line":174,"column":12},"end":{"line":174,"column":63}},"74":{"start":{"line":177,"column":8},"end":{"line":180,"column":9}},"75":{"start":{"line":178,"column":12},"end":{"line":178,"column":39}},"76":{"start":{"line":179,"column":12},"end":{"line":179,"column":84}},"77":{"start":{"line":181,"column":8},"end":{"line":181,"column":22}},"78":{"start":{"line":188,"column":8},"end":{"line":203,"column":9}},"79":{"start":{"line":189,"column":12},"end":{"line":194,"column":13}},"80":{"start":{"line":190,"column":16},"end":{"line":190,"column":109}},"81":{"start":{"line":193,"column":16},"end":{"line":193,"column":96}},"82":{"start":{"line":197,"column":12},"end":{"line":202,"column":13}},"83":{"start":{"line":198,"column":16},"end":{"line":198,"column":102}},"84":{"start":{"line":201,"column":16},"end":{"line":201,"column":89}},"85":{"start":{"line":204,"column":8},"end":{"line":206,"column":9}},"86":{"start":{"line":205,"column":12},"end":{"line":205,"column":48}},"87":{"start":{"line":207,"column":8},"end":{"line":210,"column":44}},"88":{"start":{"line":217,"column":8},"end":{"line":219,"column":9}},"89":{"start":{"line":218,"column":12},"end":{"line":218,"column":51}},"90":{"start":{"line":220,"column":8},"end":{"line":222,"column":9}},"91":{"start":{"line":221,"column":12},"end":{"line":221,"column":51}},"92":{"start":{"line":228,"column":8},"end":{"line":228,"column":60}},"93":{"start":{"line":231,"column":0},"end":{"line":231,"column":30}},"94":{"start":{"line":232,"column":0},"end":{"line":232,"column":28}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":40,"column":4},"end":{"line":40,"column":5}},"loc":{"start":{"line":40,"column":35},"end":{"line":58,"column":5}},"line":40},"1":{"name":"(anonymous_1)","decl":{"start":{"line":59,"column":4},"end":{"line":59,"column":5}},"loc":{"start":{"line":59,"column":20},"end":{"line":75,"column":5}},"line":59},"2":{"name":"(anonymous_2)","decl":{"start":{"line":76,"column":4},"end":{"line":76,"column":5}},"loc":{"start":{"line":76,"column":22},"end":{"line":80,"column":5}},"line":76},"3":{"name":"(anonymous_3)","decl":{"start":{"line":78,"column":31},"end":{"line":78,"column":32}},"loc":{"start":{"line":78,"column":42},"end":{"line":78,"column":77}},"line":78},"4":{"name":"(anonymous_4)","decl":{"start":{"line":81,"column":4},"end":{"line":81,"column":5}},"loc":{"start":{"line":81,"column":18},"end":{"line":83,"column":5}},"line":81},"5":{"name":"(anonymous_5)","decl":{"start":{"line":89,"column":4},"end":{"line":89,"column":5}},"loc":{"start":{"line":89,"column":45},"end":{"line":103,"column":5}},"line":89},"6":{"name":"(anonymous_6)","decl":{"start":{"line":99,"column":22},"end":{"line":99,"column":23}},"loc":{"start":{"line":99,"column":28},"end":{"line":101,"column":13}},"line":99},"7":{"name":"(anonymous_7)","decl":{"start":{"line":107,"column":4},"end":{"line":107,"column":5}},"loc":{"start":{"line":107,"column":23},"end":{"line":142,"column":5}},"line":107},"8":{"name":"(anonymous_8)","decl":{"start":{"line":113,"column":38},"end":{"line":113,"column":39}},"loc":{"start":{"line":113,"column":56},"end":{"line":137,"column":13}},"line":113},"9":{"name":"(anonymous_9)","decl":{"start":{"line":146,"column":4},"end":{"line":146,"column":5}},"loc":{"start":{"line":146,"column":26},"end":{"line":161,"column":5}},"line":146},"10":{"name":"(anonymous_10)","decl":{"start":{"line":162,"column":4},"end":{"line":162,"column":5}},"loc":{"start":{"line":162,"column":38},"end":{"line":164,"column":5}},"line":162},"11":{"name":"(anonymous_11)","decl":{"start":{"line":169,"column":4},"end":{"line":169,"column":5}},"loc":{"start":{"line":169,"column":26},"end":{"line":182,"column":5}},"line":169},"12":{"name":"(anonymous_12)","decl":{"start":{"line":186,"column":4},"end":{"line":186,"column":5}},"loc":{"start":{"line":186,"column":44},"end":{"line":211,"column":5}},"line":186},"13":{"name":"(anonymous_13)","decl":{"start":{"line":216,"column":4},"end":{"line":216,"column":5}},"loc":{"start":{"line":216,"column":26},"end":{"line":223,"column":5}},"line":216},"14":{"name":"(anonymous_14)","decl":{"start":{"line":227,"column":4},"end":{"line":227,"column":5}},"loc":{"start":{"line":227,"column":24},"end":{"line":229,"column":5}},"line":227}},"branchMap":{"0":{"loc":{"start":{"line":46,"column":28},"end":{"line":46,"column":77}},"type":"binary-expr","locations":[{"start":{"line":46,"column":28},"end":{"line":46,"column":53}},{"start":{"line":46,"column":57},"end":{"line":46,"column":77}}],"line":46},"1":{"loc":{"start":{"line":47,"column":25},"end":{"line":47,"column":55}},"type":"binary-expr","locations":[{"start":{"line":47,"column":25},"end":{"line":47,"column":47}},{"start":{"line":47,"column":51},"end":{"line":47,"column":55}}],"line":47},"2":{"loc":{"start":{"line":48,"column":26},"end":{"line":48,"column":60}},"type":"binary-expr","locations":[{"start":{"line":48,"column":26},"end":{"line":48,"column":49}},{"start":{"line":48,"column":53},"end":{"line":48,"column":60}}],"line":48},"3":{"loc":{"start":{"line":53,"column":26},"end":{"line":55,"column":18}},"type":"cond-expr","locations":[{"start":{"line":54,"column":14},"end":{"line":54,"column":71}},{"start":{"line":55,"column":14},"end":{"line":55,"column":18}}],"line":53},"4":{"loc":{"start":{"line":56,"column":21},"end":{"line":56,"column":47}},"type":"binary-expr","locations":[{"start":{"line":56,"column":21},"end":{"line":56,"column":31}},{"start":{"line":56,"column":35},"end":{"line":56,"column":47}}],"line":56},"5":{"loc":{"start":{"line":63,"column":12},"end":{"line":65,"column":13}},"type":"if","locations":[{"start":{"line":63,"column":12},"end":{"line":65,"column":13}},{"start":{"line":63,"column":12},"end":{"line":65,"column":13}}],"line":63},"6":{"loc":{"start":{"line":77,"column":8},"end":{"line":79,"column":9}},"type":"if","locations":[{"start":{"line":77,"column":8},"end":{"line":79,"column":9}},{"start":{"line":77,"column":8},"end":{"line":79,"column":9}}],"line":77},"7":{"loc":{"start":{"line":90,"column":8},"end":{"line":92,"column":9}},"type":"if","locations":[{"start":{"line":90,"column":8},"end":{"line":92,"column":9}},{"start":{"line":90,"column":8},"end":{"line":92,"column":9}}],"line":90},"8":{"loc":{"start":{"line":94,"column":8},"end":{"line":102,"column":9}},"type":"if","locations":[{"start":{"line":94,"column":8},"end":{"line":102,"column":9}},{"start":{"line":94,"column":8},"end":{"line":102,"column":9}}],"line":94},"9":{"loc":{"start":{"line":109,"column":8},"end":{"line":141,"column":9}},"type":"if","locations":[{"start":{"line":109,"column":8},"end":{"line":141,"column":9}},{"start":{"line":109,"column":8},"end":{"line":141,"column":9}}],"line":109},"10":{"loc":{"start":{"line":114,"column":16},"end":{"line":117,"column":17}},"type":"if","locations":[{"start":{"line":114,"column":16},"end":{"line":117,"column":17}},{"start":{"line":114,"column":16},"end":{"line":117,"column":17}}],"line":114},"11":{"loc":{"start":{"line":118,"column":16},"end":{"line":121,"column":17}},"type":"if","locations":[{"start":{"line":118,"column":16},"end":{"line":121,"column":17}},{"start":{"line":118,"column":16},"end":{"line":121,"column":17}}],"line":118},"12":{"loc":{"start":{"line":123,"column":16},"end":{"line":128,"column":17}},"type":"if","locations":[{"start":{"line":123,"column":16},"end":{"line":128,"column":17}},{"start":{"line":123,"column":16},"end":{"line":128,"column":17}}],"line":123},"13":{"loc":{"start":{"line":131,"column":16},"end":{"line":136,"column":17}},"type":"if","locations":[{"start":{"line":131,"column":16},"end":{"line":136,"column":17}},{"start":{"line":131,"column":16},"end":{"line":136,"column":17}}],"line":131},"14":{"loc":{"start":{"line":147,"column":8},"end":{"line":149,"column":9}},"type":"if","locations":[{"start":{"line":147,"column":8},"end":{"line":149,"column":9}},{"start":{"line":147,"column":8},"end":{"line":149,"column":9}}],"line":147},"15":{"loc":{"start":{"line":151,"column":8},"end":{"line":160,"column":9}},"type":"if","locations":[{"start":{"line":151,"column":8},"end":{"line":160,"column":9}},{"start":{"line":151,"column":8},"end":{"line":160,"column":9}}],"line":151},"16":{"loc":{"start":{"line":170,"column":22},"end":{"line":170,"column":86}},"type":"cond-expr","locations":[{"start":{"line":170,"column":40},"end":{"line":170,"column":73}},{"start":{"line":170,"column":76},"end":{"line":170,"column":86}}],"line":170},"17":{"loc":{"start":{"line":172,"column":8},"end":{"line":175,"column":9}},"type":"if","locations":[{"start":{"line":172,"column":8},"end":{"line":175,"column":9}},{"start":{"line":172,"column":8},"end":{"line":175,"column":9}}],"line":172},"18":{"loc":{"start":{"line":177,"column":8},"end":{"line":180,"column":9}},"type":"if","locations":[{"start":{"line":177,"column":8},"end":{"line":180,"column":9}},{"start":{"line":177,"column":8},"end":{"line":180,"column":9}}],"line":177},"19":{"loc":{"start":{"line":188,"column":8},"end":{"line":203,"column":9}},"type":"if","locations":[{"start":{"line":188,"column":8},"end":{"line":203,"column":9}},{"start":{"line":188,"column":8},"end":{"line":203,"column":9}}],"line":188},"20":{"loc":{"start":{"line":189,"column":12},"end":{"line":194,"column":13}},"type":"if","locations":[{"start":{"line":189,"column":12},"end":{"line":194,"column":13}},{"start":{"line":189,"column":12},"end":{"line":194,"column":13}}],"line":189},"21":{"loc":{"start":{"line":197,"column":12},"end":{"line":202,"column":13}},"type":"if","locations":[{"start":{"line":197,"column":12},"end":{"line":202,"column":13}},{"start":{"line":197,"column":12},"end":{"line":202,"column":13}}],"line":197},"22":{"loc":{"start":{"line":204,"column":8},"end":{"line":206,"column":9}},"type":"if","locations":[{"start":{"line":204,"column":8},"end":{"line":206,"column":9}},{"start":{"line":204,"column":8},"end":{"line":206,"column":9}}],"line":204},"23":{"loc":{"start":{"line":217,"column":8},"end":{"line":219,"column":9}},"type":"if","locations":[{"start":{"line":217,"column":8},"end":{"line":219,"column":9}},{"start":{"line":217,"column":8},"end":{"line":219,"column":9}}],"line":217},"24":{"loc":{"start":{"line":220,"column":8},"end":{"line":222,"column":9}},"type":"if","locations":[{"start":{"line":220,"column":8},"end":{"line":222,"column":9}},{"start":{"line":220,"column":8},"end":{"line":222,"column":9}}],"line":220}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":4,"8":4,"9":4,"10":4,"11":4,"12":4,"13":4,"14":4,"15":4,"16":4,"17":4,"18":4,"19":4,"20":4,"21":4,"22":4,"23":4,"24":4,"25":4,"26":1,"27":4,"28":4,"29":4,"30":4,"31":4,"32":0,"33":4,"34":4,"35":4,"36":0,"37":29,"38":0,"39":29,"40":29,"41":5,"42":24,"43":24,"44":6,"45":6,"46":5,"47":5,"48":0,"49":0,"50":5,"51":1,"52":1,"53":4,"54":1,"55":3,"56":4,"57":4,"58":4,"59":0,"60":4,"61":1,"62":1,"63":0,"64":1,"65":1,"66":1,"67":0,"68":0,"69":36,"70":36,"71":36,"72":29,"73":29,"74":36,"75":0,"76":0,"77":36,"78":29,"79":0,"80":0,"81":0,"82":29,"83":1,"84":28,"85":29,"86":0,"87":29,"88":4,"89":0,"90":4,"91":0,"92":4,"93":1,"94":1},"f":{"0":4,"1":4,"2":4,"3":4,"4":0,"5":29,"6":24,"7":6,"8":5,"9":1,"10":0,"11":36,"12":29,"13":4,"14":4},"b":{"0":[4,0],"1":[4,0],"2":[4,0],"3":[4,0],"4":[4,0],"5":[1,3],"6":[4,0],"7":[0,29],"8":[5,24],"9":[5,1],"10":[0,5],"11":[1,4],"12":[1,3],"13":[0,4],"14":[0,1],"15":[1,0],"16":[36,0],"17":[29,7],"18":[0,36],"19":[0,29],"20":[0,0],"21":[1,28],"22":[0,29],"23":[0,4],"24":[0,4]},"inputSourceMap":{"version":3,"file":"/home/circleci/circleci-build/src/connector.ts","sources":["/home/circleci/circleci-build/src/connector.ts"],"names":[],"mappings":"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","sourcesContent":["import * as rethinkdb from 'rethinkdb'\nimport { TableManager } from './table-manager'\n\nimport * as crypto from 'crypto'\nimport { version as pluginVersion } from '../package.json'\nimport { EventEmitter } from 'events'\nimport { DeepstreamPlugin, DeepstreamStorage, StorageReadCallback, StorageWriteCallback, EVENT } from '@deepstream/types'\n\ninterface RethinkDBOptions extends rethinkdb.ConnectionOptions {\n  primaryKey: string,\n  db: string,\n  defaultTable: string,\n  splitChar: string,\n  host: string,\n  port: number,\n  versionKey?: string,\n  readOnly: boolean\n}\n\ninterface Params {\n  fullKey?: string,\n  table: string,\n  id: string\n}\n\nexport class Connector extends DeepstreamPlugin implements DeepstreamStorage {\n  public apiVersion = 2\n  public description = `Rethinkdb Storage Connector ${pluginVersion}`\n\n  private connection!: rethinkdb.Connection\n  private tableManager!: TableManager\n  private defaultTable: string = this.options.defaultTable || 'deepstream_records'\n  private splitChar: string | null = this.options.splitChar || null\n  private tableMatch!: RegExp | null\n  private primaryKey: string = this.options.primaryKey || 'ds_id'\n  private emitter = new EventEmitter()\n  private isReady: boolean = false\n  private logger = this.services.logger.getNameSpace('RETHINDB')\n\n  /**\n   * Connects deepstream to a rethinkdb. RethinksDB is a great fit for deepstream due to its realtime capabilities.\n   *\n   * Similar to other storage connectors (e.g. MongoDB), this connector supports saving records to multiple tables.\n   * In order to do this, specify a splitChar, e.g. '/' and use it in your record names. Naming your record\n   *\n   * user/i4vcg5j1-16n1qrnziuog\n   *\n   * for instance will create a user table and store it in it. This will allow for more sophisticated queries as\n   * well as speed up read operations since there are less entries to look through\n   *\n   * @param {Object} options rethinkdb driver options. See rethinkdb.com/api/javascript/#connect\n   *\n   * e.g.\n   *\n   * {\n   *     host: 'localhost',\n   *     port: 28015,\n   *     authKey: 'someString'\n   *     database: 'deepstream',\n   *     defaultTable: 'deepstream_records',\n   *     splitChar: '/'\n   * }\n   *\n   * Please note the three additional, optional keys:\n   *\n   * database   specifies which database to use. Defaults to 'deepstream'\n   * defaultTable specifies which table records will be stored in that don't specify a table. Defaults to deepstream_records\n   * splitChar   specifies a character that separates the record's id from the table it should be stored in. defaults to null\n   */\n  constructor (private options: RethinkDBOptions, private services: any) {\n    super ()\n    this.checkOptions(options)\n\n    this.tableMatch = this.splitChar\n      ? new RegExp('^(\\\\w+)' + this.escapeRegExp(this.splitChar))\n      : null\n\n    options.db = options.db || 'deepstream'\n\n    this.connect()\n  }\n\n  private async connect () {\n    try {\n      this.connection = await rethinkdb.connect(this.options)\n      const dbList = await rethinkdb.dbList().run(this.connection)\n      if (!dbList.includes(this.options.db)) {\n        await rethinkdb.dbCreate(this.options.db).run(this.connection)\n      }\n      this.connection.use(this.options.db)\n      this.tableManager = new TableManager(this.connection, this.options.db)\n      await this.tableManager.refreshTables()\n      this.isReady = true\n      this.emitter.emit('ready')\n    } catch (error) {\n      this.logger.fatal('CONNECTION_ERROR', error.toString())\n    }\n  }\n\n  public async whenReady (): Promise<void> {\n    if (!this.isReady) {\n      return new Promise(resolve => this.emitter.once('ready', resolve))\n    }\n  }\n\n  public async close () {\n    await this.connection.close()\n  }\n\n  /**\n   * Writes a value to the database. If the specified table doesn't exist yet, it will be created\n   * before the write is excecuted. If a table creation is already in progress, create table will\n   * only add the method to its array of callbacks\n   */\n  public set (recordName: string, version: number, data: any, callback: StorageWriteCallback) {\n    if (this.options.readOnly) {\n      this.logger.error(EVENT.ERROR, 'Rethinkdb running in read-only mode, yet set was called')\n    }\n\n    const params = this.getParams(recordName)\n\n    if (this.tableManager.hasTable(params.table)) {\n      this.insert(params, version, data, callback)\n    } else {\n      this.tableManager.createTable(params.table, this.primaryKey)\n        .then(() => {\n          this.insert(params, version, data, callback)\n        })\n    }\n  }\n\n  /**\n   * Retrieves a value from the cache\n   */\n  public get (key: string, callback: StorageReadCallback) {\n    const params = this.getParams(key)\n\n    if (this.tableManager.hasTable(params.table)) {\n      rethinkdb\n        .table(params.table)\n        .get( params.id )\n        .run(this.connection, (error: Error | null, entry: any) => {\n          if (error) {\n            callback(error.toString())\n            return\n          }\n          if (!entry) {\n            callback(null, -1, null)\n            return\n          }\n          let version\n          if (this.options.versionKey) {\n            version = entry[this.options.versionKey]\n          } else {\n            version = entry.__ds._v\n          }\n          delete entry[this.primaryKey]\n          delete entry.__ds // in case is set\n          if (entry.__dsList) {\n            callback(null, version, entry.__dsList)\n          } else {\n            callback(null, version, entry)\n          }\n        } )\n    } else {\n      callback(null, -1, null)\n    }\n  }\n\n  /**\n   * Deletes an entry from the cache.\n   */\n  public delete (key: string, callback: StorageWriteCallback) {\n    if (this.options.readOnly) {\n      this.logger.error(EVENT.ERROR, 'Rethinkdb running in read-only mode, yet set was called')\n    }\n\n    const params = this.getParams( key )\n\n    if (this.tableManager.hasTable(params.table) ) {\n      rethinkdb\n        .table(params.table)\n        .get(params.id)\n        .delete()\n        .run(this.connection, callback as any)\n    } else {\n      callback(`Table '${params.table}' does not exist`)\n    }\n  }\n\n  public deleteBulk (recordNames: string[], callback: StorageWriteCallback): void {\n    throw new Error('Delete bulk only required in cache')\n  }\n\n  /**\n   * Parses the provided record name and returns an object\n   * containing a table name and a record name\n   */\n  private getParams (recordName: string) {\n    const table = this.tableMatch ? recordName.match(this.tableMatch) : recordName\n    const params: Params = { table: this.defaultTable, id: recordName }\n\n    if (table) {\n      params.table = table[1]\n      params.id = recordName.substr(table[1].length + 1)\n    }\n\n    // rethink can't have a key > 127 bytes; hash key and store alongside\n    if (params.id.length > 127) {\n      params.fullKey = params.id\n      params.id = crypto.createHash('sha256').update(params.id).digest('hex')\n    }\n\n    return params\n  }\n\n  /**\n   * Augments a value with a primary key and writes it to the database\n   */\n  private insert (params: Params, version: number, data: any, callback: StorageWriteCallback) {\n    let value\n    if (data instanceof Array) {\n      if (this.options.versionKey) {\n        value = { __dsList: data, [this.options.versionKey]: version, [this.primaryKey]: params.id }\n      } else {\n        value = { __dsList: data, __ds: { _v: version }, [this.primaryKey]: params.id }\n      }\n    } else {\n      if (this.options.versionKey) {\n        value = { ...data, [this.options.versionKey]: version, [this.primaryKey]: params.id }\n      } else {\n        value = { ...data, __ds: { _v: version }, [this.primaryKey]: params.id }\n      }\n    }\n\n    if (params.fullKey) {\n      value.__ds.fullKey = params.fullKey\n    }\n\n    rethinkdb\n      .table(params.table)\n      .insert(value, { returnChanges: false, conflict: 'replace' } )\n      .run(this.connection, callback as any)\n  }\n\n  /**\n   * Makes sure that the options object contains all mandatory\n   * settings\n   */\n  private checkOptions (options: RethinkDBOptions) {\n    if ( typeof options.host !== 'string' ) {\n      throw new Error( 'Missing option host' )\n    }\n    if (isNaN(options.port)) {\n      throw new Error( 'Missing option port' )\n    }\n  }\n\n  /**\n   * Escapes user input for use in a regular expression\n   */\n  private escapeRegExp (value: string) {\n    return value.replace( /[.*+?^${}()|[\\]\\\\]/g, '\\\\$&' ) // $& means the whole matched string\n  }\n}\n\nexport default Connector\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"3875d7de731f07d4e209a13ca31a8fa5b0803224","contentHash":"593e67f433e3cf150e6702415ed447577ba7e58cbf0c7a991518d40fa63bc849"},"/home/circleci/circleci-build/src/table-manager.ts":{"path":"/home/circleci/circleci-build/src/table-manager.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":18},"end":{"line":3,"column":38}},"2":{"start":{"line":4,"column":17},"end":{"line":4,"column":34}},"3":{"start":{"line":7,"column":8},"end":{"line":7,"column":37}},"4":{"start":{"line":8,"column":8},"end":{"line":8,"column":33}},"5":{"start":{"line":9,"column":8},"end":{"line":9,"column":32}},"6":{"start":{"line":10,"column":8},"end":{"line":10,"column":51}},"7":{"start":{"line":11,"column":8},"end":{"line":11,"column":40}},"8":{"start":{"line":17,"column":8},"end":{"line":34,"column":9}},"9":{"start":{"line":18,"column":12},"end":{"line":18,"column":48}},"10":{"start":{"line":19,"column":12},"end":{"line":32,"column":13}},"11":{"start":{"line":20,"column":16},"end":{"line":23,"column":42}},"12":{"start":{"line":24,"column":16},"end":{"line":24,"column":43}},"13":{"start":{"line":25,"column":16},"end":{"line":25,"column":41}},"14":{"start":{"line":28,"column":16},"end":{"line":28,"column":41}},"15":{"start":{"line":29,"column":16},"end":{"line":31,"column":17}},"16":{"start":{"line":30,"column":20},"end":{"line":30,"column":28}},"17":{"start":{"line":33,"column":12},"end":{"line":33,"column":19}},"18":{"start":{"line":35,"column":8},"end":{"line":35,"column":75}},"19":{"start":{"line":35,"column":40},"end":{"line":35,"column":73}},"20":{"start":{"line":42,"column":8},"end":{"line":42,"column":38}},"21":{"start":{"line":49,"column":23},"end":{"line":52,"column":33}},"22":{"start":{"line":53,"column":8},"end":{"line":53,"column":43}},"23":{"start":{"line":61,"column":8},"end":{"line":61,"column":58}},"24":{"start":{"line":64,"column":0},"end":{"line":64,"column":36}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":4},"end":{"line":6,"column":5}},"loc":{"start":{"line":6,"column":38},"end":{"line":12,"column":5}},"line":6},"1":{"name":"(anonymous_1)","decl":{"start":{"line":16,"column":4},"end":{"line":16,"column":5}},"loc":{"start":{"line":16,"column":41},"end":{"line":36,"column":5}},"line":16},"2":{"name":"(anonymous_2)","decl":{"start":{"line":18,"column":37},"end":{"line":18,"column":38}},"loc":{"start":{"line":18,"column":43},"end":{"line":18,"column":46}},"line":18},"3":{"name":"(anonymous_3)","decl":{"start":{"line":35,"column":27},"end":{"line":35,"column":28}},"loc":{"start":{"line":35,"column":40},"end":{"line":35,"column":73}},"line":35},"4":{"name":"(anonymous_4)","decl":{"start":{"line":41,"column":4},"end":{"line":41,"column":5}},"loc":{"start":{"line":41,"column":20},"end":{"line":43,"column":5}},"line":41},"5":{"name":"(anonymous_5)","decl":{"start":{"line":48,"column":4},"end":{"line":48,"column":5}},"loc":{"start":{"line":48,"column":26},"end":{"line":54,"column":5}},"line":48},"6":{"name":"(anonymous_6)","decl":{"start":{"line":60,"column":4},"end":{"line":60,"column":5}},"loc":{"start":{"line":60,"column":30},"end":{"line":62,"column":5}},"line":60}},"branchMap":{"0":{"loc":{"start":{"line":17,"column":8},"end":{"line":34,"column":9}},"type":"if","locations":[{"start":{"line":17,"column":8},"end":{"line":34,"column":9}},{"start":{"line":17,"column":8},"end":{"line":34,"column":9}}],"line":17},"1":{"loc":{"start":{"line":29,"column":16},"end":{"line":31,"column":17}},"type":"if","locations":[{"start":{"line":29,"column":16},"end":{"line":31,"column":17}},{"start":{"line":29,"column":16},"end":{"line":31,"column":17}}],"line":29}},"s":{"0":1,"1":1,"2":1,"3":4,"4":4,"5":4,"6":4,"7":4,"8":24,"9":4,"10":4,"11":4,"12":4,"13":4,"14":0,"15":0,"16":0,"17":4,"18":20,"19":20,"20":36,"21":9,"22":9,"23":0,"24":1},"f":{"0":4,"1":24,"2":4,"3":20,"4":36,"5":9,"6":0},"b":{"0":[4,20],"1":[0,0]},"inputSourceMap":{"version":3,"file":"/home/circleci/circleci-build/src/table-manager.ts","sources":["/home/circleci/circleci-build/src/table-manager.ts"],"names":[],"mappings":";;AAAA,uCAAsC;AACtC,mCAAqC;AAErC,MAAa,YAAY;IAIvB,YAAqB,UAAgC,EAAU,QAAgB;QAA1D,eAAU,GAAV,UAAU,CAAsB;QAAU,aAAQ,GAAR,QAAQ,CAAQ;QAHvE,WAAM,GAAG,IAAI,GAAG,EAAU,CAAA;QAC1B,YAAO,GAAG,IAAI,qBAAY,EAAE,CAAA;QAGlC,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC,CAAA;IACjC,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,WAAW,CAAE,KAAa,EAAE,UAAkB;QACzD,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;YAC9C,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,EAAE,GAAE,CAAC,CAAC,CAAA;YAClC,IAAI;gBACF,MAAM,SAAS;qBACZ,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC;qBACjB,WAAW,CAAC,KAAK,EAAE,EAAE,WAAW,EAAE,UAAU,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;qBACnE,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;gBAEvB,MAAM,IAAI,CAAC,aAAa,EAAE,CAAA;gBAC1B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;aACzB;YAAC,OAAO,CAAC,EAAE;gBACV,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;gBACxB,IAAI,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,KAAK,KAAK,EAAE;oBACxC,MAAM,CAAC,CAAA;iBACR;aACF;YACD,OAAM;SACP;QAED,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,CAAA;IACpE,CAAC;IAED;;;OAGG;IACI,QAAQ,CAAE,KAAa;QAC5B,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;IAC/B,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,aAAa;QACxB,MAAM,MAAM,GAAG,MAAM,SAAS;aAC3B,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC;aACjB,SAAS,EAAE;aACX,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;QAEvB,IAAI,CAAC,MAAM,GAAG,IAAI,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAA;IACpC,CAAC;IAED;;;;OAIG;IACK,kBAAkB,CAAE,KAAU;QACpC,OAAO,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAA;IACnD,CAAC;CACF;AA/DD,oCA+DC","sourcesContent":["import * as rethinkdb from 'rethinkdb'\nimport { EventEmitter } from 'events'\n\nexport class TableManager {\n  private tables = new Set<string>()\n  private emitter = new EventEmitter()\n\n  constructor (private connection: rethinkdb.Connection, private database: string) {\n    this.emitter.setMaxListeners(0)\n  }\n\n  /**\n   * Creates the table if it doesn't exist yet\n   */\n  public async createTable (table: string, primaryKey: string) {\n    if (this.emitter.listeners(table).length === 0) {\n      this.emitter.once(table, () => {})\n      try {\n        await rethinkdb\n          .db(this.database)\n          .tableCreate(table, { primary_key: primaryKey, durability: 'soft' })\n          .run(this.connection)\n\n        await this.refreshTables()\n        this.emitter.emit(table)\n      } catch (e) {\n        this.emitter.emit(table)\n        if (this.isTableExistsError(e) === false) {\n          throw e\n        }\n      }\n      return\n    }\n\n    return new Promise((resolve) => this.emitter.once(table, resolve))\n  }\n\n  /**\n   * Checks if a specific table name exists. The list of tables is retrieved\n   * on initialisation and can be updated at runtime using refreshTables\n   */\n  public hasTable (table: string) {\n    return this.tables.has(table)\n  }\n\n  /**\n   * Called whenever the list of tables has gotten out of sync. E.g. after\n   * receiving a \"table exists\"\n   */\n  public async refreshTables () {\n    const tables = await rethinkdb\n      .db(this.database)\n      .tableList()\n      .run(this.connection)\n\n    this.tables = new Set([...tables])\n  }\n\n  /**\n   * If tableCreate is called for an existing table, rethinkdb returns a\n   * RqlRuntimeError. This error unfortunately doesn't come with a code or constant to check\n   * its type, so this method tries to parse its error message instead\n   */\n  private isTableExistsError (error: any) {\n    return error.msg.indexOf('already exists') !== -1\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"606e3e44498031b3096a81aa4906cdb3d865a889","contentHash":"b4caabc45899fdef0ae19dde28b73542dc1c63754ce255319f4dddfedbb36822"}}